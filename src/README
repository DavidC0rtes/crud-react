ESTRUCTURA DE ARCHIVOS
-----------------------
- components: contiene archivos .js que definen los componentes del front-end que se usan. En la terminología de React un componente es básicamente una función que se encarga de renderizar algún elemento html (titulos, botones, etc) pero también pueden ser funciones que realizan alguna lógica necesaria para el frontend.

- services: esta carpeta tiene un solo archivo (person.js) que sirve como api para conectarse a la bd desde App.js

- server.js: aquí se lleva a cabo la conexión con la bd, utilizando una herramienta que se llama [pg](https://www.npmjs.com/package/pg)

- App.js: tiene el frontend de la aplicación, por eso ven que al inicio se importa React.

- server-test.js: aquí se puede probar la conexión con alguna bd que tengan en su local, en la consola escriben:
        node server-test.js <contraseña> [nombre] [numero] nombre y número son opcionales.

PASO A PASO PARA CORRER EL PROYECTO
-----------------------------------

Una vez creen su bd en postgres y le meten una tabla con nombre 'contacts' que además de id, tenga un campo phone y name proceden a hacer lo siguiente para poder probar la aplicación:

1. Crean un archivo .env en la raíz del repositorio. Allí escriben las variables de ambiente para acceder a la bd: https://node-postgres.com/features/connecting. 
   También deben añadir una llamada SERVERPORT donde se específica el puerto en dónde va a correr la conexión con el servidor, ej: SERVERPORT=3001. Pueden probar la conexión con el archivo 'server-test.js'

2. Inicializar el servidor: npm run server.
3. Inicializar la aplicación: npm start. 

[frontend] App.js ----> [API] services/person.js ------>HTTP----> server.js -----> [PostgreSQL]

- Documentación de React: https://reactjs.org/docs/getting-started.html
- Documentación de JavaScript: https://developer.mozilla.org/en-US/docs/Web/JavaScript
